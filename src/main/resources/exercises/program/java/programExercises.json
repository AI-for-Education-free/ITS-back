{
  "source": "w3resource",
  "link": "https://www.w3resource.com/java-exercises/index.php",
  "subjectType": "JAVA",
  "exercises": [
    {
      "orderInTag": 1,
      "id": "1607982877",
      "concepts": [
        "basic"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program to print 'Hello' on screen and then print your name on a separate line.",
          "chinese": "编写一个Java程序，在屏幕上打印“Hello”，然后在单独的行上打印您的名字。"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output :\nHello\nYour name"
        }
      ],
      "initCode": "public class Solution {\n    public static void printHello() {\n\n    }\n}",
      "targetMethodName": "printHello",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class Exercise1 {\n \n public static void main(String[] args) {\n  System.out.println(\"Hello\\nAlexandra Abramov!\");\n }\n \n}"
        },
        {
          "contentType": "TEXT",
          "english": "Sample solution using input from the user:\n\nJava Code:",
          "chinese": "使用用户输入的示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) \n  {\n    Scanner input = new Scanner (System.in);\n    System.out.print(\"Input your first name: \");\n    String fname = input.next();\n    System.out.print(\"Input your last name: \");\n    String lname = input.next();\n    System.out.println();\n    System.out.println(\"Hello \\n\"+fname+\" \"+lname);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:\n",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-basic-exercise-1.png"
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:\n",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-basic-exercise-flowchart-1-a.png"
        }
      ],
      "tags": [
        "basic"
      ]
    },
    {
      "orderInTag": 1,
      "id": "626812306",
      "initCode": "public class Solution {\n    public static double smallest(double x, double y, double z)\n    {\n        \n    }\n}",
      "targetMethodName": "smallest",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to find the smallest number among three numbers.",
          "chinese": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput the first number: 25\nInput the Second number: 37\nInput the third number: 29 \nExpected Output:\n\nThe smallest value is 25.0"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise1 {\n\n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the first number: \");\n        double x = in.nextDouble();\n        System.out.print(\"Input the Second number: \");\n        double y = in.nextDouble();\n        System.out.print(\"Input the third number: \");\n        double z = in.nextDouble();\n        System.out.print(\"The smallest value is \" + smallest(x, y, z)+\"\\n\" );\n    }\n\n   public static double smallest(double x, double y, double z)\n    {\n        return Math.min(Math.min(x, y), z);\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:\n",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-1.png"
        }
      ]
    },
    {
      "orderInTag": 2,
      "id": "1984017648",
      "concepts": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to compute the average of three numbers.",
          "chinese": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput the first number: 25 \nInput the second number: 45\nInput the third number: 65\nExpected Output:\n\nThe average value is 45.0"
        }
      ],
      "initCode": "public class Solution {\n    public static double average(double x, double y, double z)\n    {\n        \n    }\n}",
      "targetMethodName": "average",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise2 {\n\n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the first number: \");\n        double x = in.nextDouble();\n        System.out.print(\"Input the second number: \");\n        double y = in.nextDouble();\n        System.out.print(\"Input the third number: \");\n        double z = in.nextDouble();\n        System.out.print(\"The average value is \" + average(x, y, z)+\"\\n\" );\n    }\n\n  public static double average(double x, double y, double z)\n    {\n        return (x + y + z) / 3;\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-2.png"
        }
      ],
      "tags": [
        "method"
      ]
    },
    {
      "orderInTag": 3,
      "id": "783120422",
      "concepts": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to display the middle character of a string.",
          "chinese": ""
        },
        {
          "contentType": "TEXT",
          "english": "Note: a) If the length of the string is odd there will be two middle characters.\nb) If the length of the string is even there will be one middle character.",
          "chinese": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput a string: 350 \nExpected Output:\n\n                                                                          \nThe middle character in the string: 5"
        }
      ],
      "initCode": "public class Solution {\n    public static double middle(String str)\n    {\n        \n    }\n}",
      "targetMethodName": "middle",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise3 {\n  public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input a string: \");\n        String str = in.nextLine();\n        System.out.print(\"The middle character in the string: \" + middle(str)+\"\\n\");\n    }\n public static String middle(String str)\n    {\n        int position;\n        int length;\n        if (str.length() % 2 == 0)\n        {\n            position = str.length() / 2 - 1;\n            length = 2;\n        }\n        else\n        {\n            position = str.length() / 2;\n            length = 1;\n        }\n        return str.substring(position, position + length);\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-3.png"
        }
      ],
      "tags": [
        "method"
      ]
    },
    {
      "orderInTag": 4,
      "id": "11545219199",
      "concepts": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to count all vowels in a string.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput the string: w3resource \nExpected Output:\n\nNumber of  Vowels in the string: 4"
        }
      ],
      "initCode": "public class Solution {\n    public static double countVowels(String str) {\n        \n    }\n}",
      "targetMethodName": "countVowels",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise4 {\n  public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the string: \");\n        String str = in.nextLine();\n\n        System.out.print(\"Number of  Vowels in the string: \" + count_Vowels(str)+\"\\n\");\n    }\n public static int count_Vowels(String str)\n    {\n        int count = 0;\n        for (int i = 0; i < str.length(); i++)\n        {\n            if (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i'\n                    || str.charAt(i) == 'o' || str.charAt(i) == 'u')\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:\n",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-4.png"
        }
      ],
      "tags": [
        "method"
      ]
    },
    {
      "orderInTag": 5,
      "id": "757383549",
      "concepts": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to count all the words in a string.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput the string: The quick brown fox jumps over the lazy dog.\nExpected Output:\n\nNumber of words in the string: 9"
        }
      ],
      "initCode": "public class Solution {\n    public static int countWords(String str) {\n        \n    }\n}",
      "targetMethodName": "countWords",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise5 {\n\n  public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the string: \");\n        String str = in.nextLine();\n\n        System.out.print(\"Number of words in the string: \" + count_Words(str)+\"\\n\");\n    }\n\n public static int count_Words(String str)\n    {\n       int count = 0;\n        if (!(\" \".equals(str.substring(0, 1))) || !(\" \".equals(str.substring(str.length() - 1))))\n        {\n            for (int i = 0; i < str.length(); i++)\n            {\n                if (str.charAt(i) == ' ')\n                {\n                    count++;\n                }\n            }\n            count = count + 1; \n        }\n        return count; // returns 0 if string starts or ends with space \" \".\n    }\n }"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-5.png"
        }
      ],
      "tags": [
        "method"
      ]
    },
    {
      "orderInTag": 6,
      "id": "1908084726",
      "concepts": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to compute the sum of digits in an integer.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data:\nInput an integer: 25\nExpected Output:\n\nThe sum is 7"
        }
      ],
      "initCode": "public class Solution {\n    public static int sumDigits(long n) {\n        \n    }\n}",
      "targetMethodName": "sumDigits",
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise6 {\n\n  public static void main(String[] args)\n    {\n      Scanner in = new Scanner(System.in);\n      System.out.print(\"Input an integer: \");\n      int digits = in.nextInt();\n\t  System.out.println(\"The sum is \" + sumDigits(digits));\n    }\n\n public static int sumDigits(long n) {\n\t\tint result = 0;\n\t\t\n\t\twhile(n > 0) {\n\t\t\tresult += n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\t\n }"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-6.png"
        }
      ],
      "tags": [
        "method"
      ]
    },
    {
      "orderInTag": 7,
      "id": "1910861483",
      "initCode": "public class Solution {\n    public static int getPentagonalNumber(int i) {\n        \n    }\n}",
      "targetMethodName": "getPentagonalNumber",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to display the first 50 pentagonal numbers.\nNote: A pentagonal number is a figurate number that extends the concept of triangular and square numbers to the pentagon, but, unlike the first two, the patterns involved in the construction of pentagonal numbers are not rotationally symmetrical.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-7.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\n1     5     12    22    35    51    70    92    117   145\n176   210   247   287   330   376   425   477   532   590\n651   715   782   852   925   1001  1080  1162  1247  1335\n1426  1520  1617  1717  1820  1926  2035  2147  2262  2380\n2501  2625  2752  2882  3015  3151  3290  3432  3577  3725"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise7 {\npublic static void main(String[] args) {\n   \t\tint count = 1;\n\t\tfor(int i = 1; i <= 50; i++){\n\t\t\tSystem.out.printf(\"%-6d\",getPentagonalNumber(i));\n\t\t\tif(count % 10 == 0) System.out.println();\n\t\t\tcount++;\n\t\t}\n    }\n  public static int getPentagonalNumber(int i) {\n\t\treturn (i * (3 * i - 1))/2;\n\t}\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-7.png"
        }
      ]
    },
    {
      "orderInTag": 8,
      "id": "1445477298",
      "initCode": "public class Solution {\n    public static double futureInvestmentValue(double investmentAmount, double monthlyInterestRate, int years) {\n    \n    }\n}",
      "targetMethodName": "futureInvestmentValue",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to compute the future investment value at a given interest rate for a specified number of years.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nSample data (Monthly compounded) and Output:\nInput the investment amount: 1000\nInput the rate of interest: 10\nInput number of years: 5\n\nExpected Output:\n\nYears    FutureValue                                     \n1            1104.71                                     \n2            1220.39                                     \n3            1348.18                                     \n4            1489.35                                     \n5            1645.31"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise8 {\n \n public static void main(String[] args) {\n    Scanner in = new Scanner(System.in); \n    System.out.print(\"Input the investment amount: \");\n \tdouble investment = in.nextDouble();\n \tSystem.out.print(\"Input the rate of interest: \");\n\tdouble rate = in.nextDouble();\n\tSystem.out.print(\"Input number of years: \");\n\tint year = in.nextInt();\n\t\n\trate *= 0.01;\n\t\n\tSystem.out.println(\"Years    FutureValue\");\n\tfor(int i = 1; i <= year; i++) {\n    \tint formatter = 19;\n\t    if (i >= 10) formatter = 18;\n\t\tSystem.out.printf(i + \"%\"+formatter+\".2f\\n\", futureInvestmentValue(investment, rate/12, i));\n       }\n\t }\n \n public static double futureInvestmentValue(double investmentAmount, double monthlyInterestRate, int years) {\n\t\treturn investmentAmount * Math.pow(1 + monthlyInterestRate, years * 12);\n\t}\n}"
        },
        {
          "contentType": "TEXT",
          "english": "Sample Output:",
          "chinese": "示例输出",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "Input the investment amount: 1000                                                                             \nInput the rate of interest: 10                                                                                \nInput number of years: 5                                                                                      \nYears    FutureValue                                                                                          \n1            1104.71                                                                                          \n2            1220.39                                                                                          \n3            1348.18                                                                                          \n4            1489.35                                                                                          \n5            1645.31"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-8.png"
        }
      ]
    },
    {
      "orderInTag": 9,
      "id": "1570692484",
      "initCode": "public class Solution {\n    public static void printChars(char char1, char char2, int n) {\n        \n    }\n}",
      "targetMethodName": "printChars",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to print characters between two characters (i.e. A to P).\nNote: Prints 20 characters per line",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\n( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ;                  \n< = > ? @ A B C D E F G H I J K L M N O                  \nP Q R S T U V W X Y Z [ \\ ] ^ _ ` a b c                  \nd e f g h i j k l m n o p q r s t u v w                  \nx y z"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class Exercise9 {\n   public static void main(String[] args) {\n        print_Chars('(', 'z', 20);\n    }\n public static void print_Chars(char char1, char char2, int n) {\n        for (int ctr = 1; char1 <= char2; ctr++, char1++) {\n            System.out.print(char1 + \" \");\n            if (ctr % n == 0) System.out.println(\"\");\n        }\n\t\tSystem.out.print(\"\\n\");\n    }\n}"
        },
        {
          "contentType": "TEXT",
          "english": "Sample Output:",
          "chinese": "示例输出",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ;                                                                       \n< = > ? @ A B C D E F G H I J K L M N O                                                                       \nP Q R S T U V W X Y Z [ \\ ] ^ _ ` a b c                                                                       \nd e f g h i j k l m n o p q r s t u v w                                                                       \nx y z"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-9.png"
        }
      ]
    },
    {
      "orderInTag": 10,
      "id": "1953957128",
      "initCode": "public class Solution {\n    public static boolean isLeapYear(int y)\n    {\n        \n    }\n}",
      "targetMethodName": "isLeapYear",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to check whether a year (integer) entered by the user is a leap year or not.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-10.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput a year: 2017                                                                        \nfalse"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\n\npublic class Exercise10 {\n \n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input a year: \");\n        int year = in.nextInt();\n\n        System.out.println(is_LeapYear(year));\n    }\n \n public static boolean is_LeapYear(int y)\n    {\n        boolean a = (y % 4) == 0;\n        boolean b = (y % 100) != 0;\n        boolean c = ((y % 100 == 0) && (y % 400 == 0));\n\n        return a && (b || c);\n    }\n}\n"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-10.png"
        }
      ]
    },
    {
      "orderInTag": 11,
      "id": "286744419",
      "initCode": "public class Solution {\n    public static boolean isValidPassword(String password) {\n\n    }\n}",
      "targetMethodName": "isValidPassword",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to check whether a string is a valid password.\nPassword rules:\nA password must have at least ten characters.\nA password consists of only letters and digits.\nA password must contain at least two digits.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\n1. A password must have at least eight characters.                                             \n2. A password consists of only letters and digits.                                         \n3. A password must contain at least two digits                                        \nInput a password (You are agreeing to the above Terms and Conditions.): abcd1234           \nPassword is valid: abcd1234 "
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\n\npublic class Exercise11 {\n    \npublic static final int PASSWORD_LENGTH = 8;\n\npublic static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\n                \"1. A password must have at least eight characters.\\n\" +\n                \"2. A password consists of only letters and digits.\\n\" +\n                \"3. A password must contain at least two digits \\n\" +\n                \"Input a password (You are agreeing to the above Terms and Conditions.): \");\n        String s = input.nextLine();\n\n        if (is_Valid_Password(s)) {\n            System.out.println(\"Password is valid: \" + s);\n        } else {\n            System.out.println(\"Not a valid password: \" + s);\n        }\n\n    }\n\n    public static boolean is_Valid_Password(String password) {\n\n        if (password.length() < PASSWORD_LENGTH) return false;\n\n        int charCount = 0;\n        int numCount = 0;\n        for (int i = 0; i < password.length(); i++) {\n\n            char ch = password.charAt(i);\n\n            if (is_Numeric(ch)) numCount++;\n            else if (is_Letter(ch)) charCount++;\n            else return false;\n        }\n\n\n        return (charCount >= 2 && numCount >= 2);\n    }\n\n    public static boolean is_Letter(char ch) {\n        ch = Character.toUpperCase(ch);\n        return (ch >= 'A' && ch <= 'Z');\n    }\n\n\n    public static boolean is_Numeric(char ch) {\n\n        return (ch >= '0' && ch <= '9');\n    }\n\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-11.png"
        }
      ]
    },
    {
      "orderInTag": 12,
      "id": "1664592468",
      "initCode": "public class Solution {\n    public static void printMatrix(int n) {\n        \n    }\n}",
      "targetMethodName": "printMatrix",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method (takes n as input) to display an n-by-n matrix.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput a number: 10                                                                         \n1 0 0 1 1 0 0 0 1 1                                                                       \n0 0 1 0 1 0 1 0 0 0                                                                        \n0 1 0 1 0 0 0 0 0 1                                                                       \n1 1 1 0 0 0 0 1 1 1                                                                        \n1 1 0 1 1 1 0 1 0 0                                                                      \n1 0 0 0 1 1 0 0 0 0                                                                       \n0 0 1 0 0 0 0 1 1 1                                                                      \n1 1 0 1 0 1 0 0 1 0                                                                       \n0 0 1 0 0 0 0 1 1 0                                                        \n1 1 1 0 0 1 1 1 1 0"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\n\npublic class Exercise12 {\n \npublic static void main(String[] args)\n    {\n        \n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input a number: \");\n        int n = in.nextInt();\n        printMatrix(n);\n    }\n \n public static void printMatrix(int n) {\n\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                System.out.print((int)(Math.random() * 2) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-12.png"
        }
      ]
    },
    {
      "orderInTag": 13,
      "id": "11301541859",
      "initCode": "public class Solution {\n    public static double areaTriangle(double side1, double side2, double side3) {\n        \n    }\n}",
      "targetMethodName": "areaTriangle",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write Java methods to calculate triangle area.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-13.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput Side-1: 10                                                                               \nInput Side-2: 15                                                                               \nInput Side-3: 20                                                                              \nThe area of the triangle is 72.6184377413890"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise13 {\n  public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n         System.out.print(\"Input Side-1: \");\n         double side1 = in.nextDouble();\n         System.out.print(\"Input Side-2: \");\n         double side2 = in.nextDouble();\n         System.out.print(\"Input Side-3: \");\n         double side3 = in.nextDouble();\n         System.out.println( is_Valid(side1, side2,side3) ?\n                \"The area of the triangle is \" + area_triangle(side1, side2, side3) : \"Invalid triangle\" );\n    }\n\n  public static boolean is_Valid(double side1, double side2, double side3) {\n        if( side1 + side2 > side3 &&\n                side2 + side3 > side1 &&\n                side1 + side3 > side2) return true;\n        else return false;\n    }\n   public static double area_triangle(double side1, double side2, double side3) {\n        double area = 0;\n        double s = (side1 + side2 + side3)/2;\n        area = Math.sqrt(s*(s - side1)*(s - side2)*(s - side3));\n        return area;\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-13.png"
        }
      ]
    },
    {
      "orderInTag": 14,
      "id": "11472778036",
      "initCode": "public class Solution {\n    public static double pentagonArea(int n, double s) {\n        \n    }\n}",
      "targetMethodName": "pentagonArea",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to create a pentagon's area.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-14.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput the number of sides: 5                             \nInput the side: 6                                        \nThe area of the pentagon is 61.93718642120281"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise14 {\n \n  public static void main(String[] args) {\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Input the number of sides: \");\n        int n = input.nextInt();\n        System.out.print(\"Input the side: \");\n        double side = input.nextDouble();\n\n        System.out.println(\"The area of the pentagon is \" + pentagon_area(n, side));\n    }\n\n    public static double pentagon_area(int n, double s) {\n        return  (n * s * s) / (4 * Math.tan(Math.PI/n));\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-14.png"
        }
      ]
    },
    {
      "orderInTag": 16,
      "id": "1859681378",
      "initCode": "public class Solution {\n    public static ArrayList<String> twinPrime(long n) {\n        \n    }\n}",
      "targetMethodName": "twinPrime",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to find all twin prime numbers less than 100.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-16.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\n(3, 5)                                                   \n(5, 7)                                                   \n(11, 13)                                                 \n(17, 19)                                                 \n(29, 31)                                                 \n(41, 43)                                                 \n(59, 61)                                                 \n(71, 73) "
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise16 {\n \n public static void main(String[] args) {\n\n        for (int i = 2; i < 100; i++) {\n\n            if (is_Prime(i) && is_Prime(i + 2)) {\n                System.out.printf(\"(%d, %d)\\n\", i, i + 2);\n            }\n        }\n    }\n\n    public static boolean is_Prime(long n) {\n\n        if (n < 2) return false;\n\n        for (int i = 2; i <= n / 2; i++) {\n\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-16.png"
        }
      ]
    },
    {
      "orderInTag": 17,
      "id": "439410769",
      "initCode": "public class Solution {\n    public static int countValue(int num, int k) {\n        \n    }\n}",
      "targetMethodName": "countValue",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to count the number of digits in an integer with the value k (0~9). The integer may be assumed to be non-negative.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-17.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput a number:  12541\n1"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main {\n public static void main(String[] args)\n   {\n       Scanner in = new Scanner(System.in);\n       System.out.print(\"Input a number: \");\n       int n = in.nextInt();\n       if (n>0)\n       {\n       System.out.println(test(n));\n       }\n   }\n public static int test(int num)\n   {\n    int ctr = 0;\n    int n = num;\n    do{\n      if (n % 10 == 2){\n          ctr ++;\n      }\n      n /= 10;\n     }while(n > 0);\n      return ctr;\n   }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-17.png"
        }
      ]
    },
    {
      "orderInTag": 18,
      "id": "39945466",
      "initCode": "public class Solution {\n    public static boolean isConsecutive(int x, int y, int z) {\n        \n    }\n}",
      "targetMethodName": "isConsecutive",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method that accepts three integers and checks whether they are consecutive or not. Returns true or false.\nFrom Wikipedia-\nConsecutive numbers are numbers that follow each other in order. They have a difference of 1 between every two numbers. In a set of consecutive numbers, the mean and the median are equal.\nIf n is a number, then the next numbers will be n+1 and n+2.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-18-1.png"
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-18-2.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput the first number:  15\nInput the second number:  16\nInput the third number:  17\nCheck whether the three said numbers are consecutive or not!true"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main { \n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the first number: \");\n        int x = in.nextInt();\n        System.out.print(\"Input the second number: \");\n        int y = in.nextInt();\n        System.out.print(\"Input the third number: \");\n        int z = in.nextInt();\n        System.out.print(\"Check whether the three said numbers are consecutive or not!\");\n        System.out.println(test(x,y,z));\n        }\n\n public static boolean test(int x, int y, int z){\n    int max_num = Math.max(x, Math.max(y, z));\n    int min_num = Math.min(x, Math.min(y, z));\n    int middle_num = x+y+z - max_num - min_num;\n    return (max_num - middle_num) == 1 && (middle_num - min_num == 1);\n  }\n} "
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-18.png"
        }
      ]
    },
    {
      "orderInTag": 19,
      "id": "11530202290",
      "initCode": "public class Solution {\n    public static boolean testMethod19(int x, int y, int z) {\n       \n    }\n}",
      "targetMethodName": "methodTest19",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method that accepts three integers and returns true if one is the middle point between the other two integers, otherwise false.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-19.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput the first number:  2\nInput the second number:  4\nInput the third number:  6\nCheck whether the three said numbers has a midpoint!\ntrue"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main { \n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input the first number: \");\n        int x = in.nextInt();\n        System.out.print(\"Input the second number: \");\n        int y = in.nextInt();\n        System.out.print(\"Input the third number: \");\n        int z = in.nextInt();\n        System.out.print(\"Check whether the three said numbers has a midpoint!\\n\");\n        System.out.print(test(x,y,z));\n        }\n\n public static boolean test(int x, int y, int z){\n    int max = Math.max(x, Math.max(y,z));\n    int min = Math.min(x, Math.min(y,z));\n    double mid_point1 = (max + min) / 2.0;\n    int mid_point2 = x + y + z - max - min;\n    return (mid_point1 == mid_point2);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-19.png"
        }
      ]
    },
    {
      "orderInTag": 20,
      "id": "182931703",
      "initCode": "public class Solution {\n    public static int methodTest20(int n){\n\n    }\n}",
      "targetMethodName": "methodTest20",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method for extracting the first digit from a positive or negative integer.",
          "chinese": "",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-20.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput an integer(positive/negative): 81\n\nFactors of 3 of the said integer:\n81 = 3 * 3 * 3 * 3 * 1"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main { \n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input an integer(positive/negative):\");\n        int n = in.nextInt();\n        System.out.print(\"Extract the first digit from the said integer:\\n\");\n        System.out.print(test(n));\n        }\n\npublic static int test(int n){\n       int fact_num = 10;\n       while(n / fact_num != 0){\n        fact_num *= 10;\n    }\n    return Math.abs(n / (fact_num/10));\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-20.png"
        }
      ]
    },
    {
      "orderInTag": 22,
      "id": "359850201",
      "initCode": "public class Solution {\n    public static boolean methodTest22(int n){\n\n    }\n}",
      "targetMethodName": "methodTest22",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method to check whether every digit of a given integer is even. Return true if every digit is odd otherwise false.\n\nNote: 1, 3, 5, 7, 9 are odd digits and 0, 2, 4, 6, and 8 are even digits\n\nSample data:\n(8642)->true\n(123)->false\n(200)->true",
          "chinese": "编写一个 Java 方法来检查给定整数的每个数字是否为偶数。 如果每个数字都是奇数，则返回 true，否则返回 false。\n\n注：1、3、5、7、9 为奇数，0、2、4、6、8 为偶数\n\n样本数据：\n(8642)->true\n(123)->false\n(200)->true",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-22-1.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput an integer: 8642\nCheck whether every digit of the said integer is even or not!\ntrue"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main { \n public static void main(String[] args)\n    {\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"Input an integer:\");\n        int n = in.nextInt();\n        System.out.print(\"Check whether every digit of the said integer is even or not!\\n\");\n        System.out.print(test(n));\n        }\n\n  public static boolean test(int n){\n    final int f = 10;\n    if (n == 0){\n        return false;\n    }\n    while(n != 0){\n        if((n % f) % 2 != 0){\n            return false;\n        }\n        n /= 10;\n    }\n     return true;\n   }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-22.png"
        }
      ]
    },
    {
      "orderInTag": 23,
      "id": "980736155",
      "initCode": "public class Solution {\n    public static boolean isAllVowel(String input){\n\n    }\n}",
      "targetMethodName": "isAllVowel",
      "concepts": [
        "method"
      ],
      "tags": [
        "method"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java method that checks whether all the characters in a given string are vowels (a, e,i,o,u) or not. Return true if each character in the string is a vowel, otherwise return false.",
          "chinese": "编写一个 Java 方法来检查给定字符串中的所有字符是否都是元音（a、e、i、o、u）。 如果字符串中的每个字符都是元音，则返回 true，否则返回 false。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "From Wikipedia-\nA vowel is a syllabic speech sound pronounced without any stricture in the vocal tract. Vowels are one of the two principal classes of speech sounds, the other being the consonant. Vowels vary in quality, in loudness and also in quantity (length). They are usually voiced and are closely involved in prosodic variation such as tone, intonation and stress.\n\nWrite a Java method that checks whether all the characters in a given string are vowels (a, e,i,o,u) or not. Return true if each character in the string is a vowel, otherwise return false.\n\nSample Data:\nAIEEE ->true\nIAO -> true\nJava -> false\nPython -> false\n\n",
          "chinese": "来自维基百科-\n元音是在声道中没有任何狭窄的情况下发音的音节语音。 元音是语音的两大类之一，另一类是辅音。 元音的质量、响度和数量（长度）各不相同。 它们通常是浊音的，并且与音调、语调和重音等韵律变化密切相关。\n\n编写一个 Java 方法来检查给定字符串中的所有字符是否都是元音（a、e、i、o、u）。 如果字符串中的每个字符都是元音，则返回 true，否则返回 false。\n\n样本数据：\nAIEEE ->true\nIAO -> 正确\nJava -> 假\nPython -> 假",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Pictorial Presentation:",
          "chinese": "",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-23-1.png"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-image-exercise-23-2.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nExpected Output:\n\nInput a string:  AIEEE\nCheck all the characters of the said string are vowels or not!\ntrue"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    System.out.print(\"Input a string: \");\n    String str = sc.nextLine();\n    System.out.print(\"Check all the characters of the said string are vowels or not!\\n\");\n    System.out.print(test(str));\n  }\n\n  public static boolean test(String input) {\n    String str_vowels = \"aeiou\";\n    String phrase = input.toLowerCase();\n    for (int i = 0; i < phrase.length(); i++) {\n      if (str_vowels.indexOf(phrase.charAt(i)) == -1)\n        return false;\n    }\n    return true;\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-method-exercise-flowchart-23.png"
        }
      ]
    },
    {
      "orderInTag": 1,
      "id": "608581282",
      "initCode": "public class Solution {\n    public static int calculateFactorial(int n) {\n\n    }\n}",
      "targetMethodName": "calculateFactorial",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to calculate the factorial of a given positive integer.",
          "chinese": "编写一个 Java 递归方法来计算给定正整数的阶乘。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class FactorialCalculator {\n\n  public static int calculateFactorial(int n) {\n    // Base case: factorial of 0 is 1\n    if (n == 0) {\n      return 1;\n    }\n\n    // Recursive case: multiply n with factorial of (n-1)\n    return n * calculateFactorial(n - 1);\n  }\n\n  public static void main(String[] args) {\n    int number = 7;\n    int factorial = calculateFactorial(number);\n    System.out.println(\"Factorial of \" + number + \" is: \" + factorial);\n    number = 12;\n    factorial = calculateFactorial(number);\n    System.out.println(\"\\nFactorial of \" + number + \" is: \" + factorial);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nFirst, we define a class \"FactorialCalculator\" that includes a recursive method calculateFactorial() to calculate the factorial of a given positive integer n.\n\nThe calculateFactorial() method follows the recursive factorial definition. It has two cases:\n\nBase case: If n is 0, it returns 1. This is the termination condition for recursion.\nRecursive case: For any positive n, it multiplies n with the factorial of n-1. This step is repeated recursively until n reaches 0.\nIn the main() method, we demonstrate the calculateFactorial() method by calculating the factorial of 7 and 12.",
          "chinese": "在上面的练习中——\n\n首先，我们定义一个“FactorialCalculator”类，其中包含一个递归方法calculateFactorial()来计算给定正整数n的阶乘。\n\ncalculateFactorial() 方法遵循递归阶乘定义。 它有两种情况：\n\n基本情况：如果n为0，则返回1。这是递归的终止条件。\n递归情况：对于任何正数 n，它将 n 与 n-1 的阶乘相乘。 递归地重复此步骤，直到 n 达到 0。\n在main()方法中，我们通过计算7和12的阶乘来演示calculateFactorial()方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-1.png"
        }
      ]
    },
    {
      "orderInTag": 2,
      "id": "280586190",
      "initCode": "public class Solution {\n    public static int calculateSum(int n) {\n\n    }\n}",
      "targetMethodName": "calculateSum",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to calculate the sum of all numbers from 1 to n.",
          "chinese": "编写一个Java递归方法来计算从1到n的所有数字的总和。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class SumCalculator {\n\n  public static int calculateSum(int n) {\n    // Base case: sum of 0 is 0\n    if (n == 0) {\n      return 0;\n    }\n\n    // Recursive case: add n with the sum of (n-1)\n    return n + calculateSum(n - 1);\n  }\n\n  public static void main(String[] args) {\n    int number = 7;\n    int sum = calculateSum(number);\n    System.out.println(\"Sum of numbers from 1 to \" + number + \" is: \" + sum);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nThe calculateSum() method follows the recursive definition of the sum. It has two cases:\n\nBase case: If the input n is 0, it returns 0. This is the termination condition for recursion.\nRecursive case: For any positive n, it adds n with the sum of the numbers from 1 to n-1. This step is repeated recursively until n reaches 0\nIn the main() method, we demonstrate the calculateSum() method by calculating the sum of numbers from 1 to 7 and printing the result.",
          "chinese": "在上面的练习中——\n\ncalculateSum() 方法遵循总和的递归定义。 它有两种情况：\n\n基本情况：如果输入n为0，则返回0。这是递归的终止条件。\n递归情况：对于任何正数 n，它将 n 与 1 到 n-1 之间的数字之和相加。 递归地重复此步骤，直到 n 达到 0\n在 main() 方法中，我们通过计算 1 到 7 之间的数字之和并打印结果来演示calculateSum() 方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-2.png"
        }
      ]
    },
    {
      "orderInTag": 3,
      "id": "2136089454",
      "initCode": "public class Solution {\n    public static int calculateFibonacci(int n) {\n\n    }\n}",
      "targetMethodName": "calculateFibonacci",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to calculate the nth Fibonacci number.",
          "chinese": "编写一个Java递归方法来计算第n个斐波那契数。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class FibonacciCalculator {\n\n  public static int calculateFibonacci(int n) {\n    // Base case: Fibonacci numbers at positions 0 and 1 are 0 and 1, respectively\n    if (n == 0) {\n      return 0;\n    } else if (n == 1) {\n      return 1;\n    }\n\n    // Recursive case: sum of the previous two Fibonacci numbers\n    return calculateFibonacci(n - 1) + calculateFibonacci(n - 2);\n  }\n\n  public static void main(String[] args) {\n    int position = 0;\n    int fibonacciNumber = calculateFibonacci(position);\n    System.out.println(\"The Fibonacci number at position \" + position + \" is: \" + fibonacciNumber);\n    position = 3;\n    fibonacciNumber = calculateFibonacci(position);\n    System.out.println(\"\\nThe Fibonacci number at position \" + position + \" is: \" + fibonacciNumber);\n    position = 9;\n    fibonacciNumber = calculateFibonacci(position);\n    System.out.println(\"\\nThe Fibonacci number at position \" + position + \" is: \" + fibonacciNumber);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nThe \"calculateFibonacci()\" method follows the recursive definition of the Fibonacci sequence. It has two cases:\n\ncase 1: If n is 0, it returns 0.\ncase 2: If n is 1, it returns 1.\nThese are the termination conditions for recursion.\n\nFor any positive n greater than 1, the method recursively calculates the Fibonacci number by summing the previous two Fibonacci numbers (calculated using the same method). This process is repeated until n reaches one of the base cases.\n\nIn the main() method, we demonstrate the calculateFibonacci() method by calculating the Fibonacci number at position 8 and printing the result.",
          "chinese": "在上面的练习中——\n\n“calculateFibonacci()”方法遵循斐波那契数列的递归定义。 它有两种情况：\n\n情况1：如果n为0，则返回0。\n情况 2：如果 n 为 1，则返回 1。\n这些是递归的终止条件。\n\n对于任何大于 1 的正 n，该方法通过将前两个斐波那契数相加（使用相同的方法计算）来递归计算斐波那契数。 重复此过程直到 n 达到基本情况之一。\n\n在main()方法中，我们通过计算位置8处的斐波那契数并打印结果来演示calculateFibonacci()方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-3.png"
        }
      ]
    },
    {
      "orderInTag": 4,
      "id": "288908044",
      "initCode": "public class Solution {\n    public static boolean isPalindrome(String str) {\n\n    }\n}",
      "targetMethodName": "isPalindrome",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to check if a given string is a palindrome.",
          "chinese": "编写一个 Java 递归方法来检查给定字符串是否为回文。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class PalindromeChecker {\n\n  public static boolean isPalindrome(String str) {\n    // Base case: an empty string or a string with one character is a palindrome\n    if (str.length() <= 1) {\n      return true;\n    }\n\n    // Recursive case: check if the first and last characters are equal,\n    // and recursively check if the substring between them is a palindrome\n    char firstChar = str.charAt(0);\n    char lastChar = str.charAt(str.length() - 1);\n\n    if (firstChar != lastChar) {\n      return false;\n    }\n\n    String remainingSubstring = str.substring(1, str.length() - 1);\n    return isPalindrome(remainingSubstring);\n  }\n\n  public static void main(String[] args) {\n    String palindrome1 = \"madam\";\n    boolean isPalindrome1 = isPalindrome(palindrome1);\n    System.out.println(palindrome1 + \" is a palindrome: \" + isPalindrome1);\n\n    String palindrome2 = \"level\";\n    boolean isPalindrome2 = isPalindrome(palindrome2);\n    System.out.println(palindrome2 + \" is a palindrome: \" + isPalindrome2);\n\n    String notPalindrome = \"java\";\n    boolean isPalindrome3 = isPalindrome(notPalindrome);\n    System.out.println(notPalindrome + \" is a palindrome: \" + isPalindrome3);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nWe define a class \"PalindromeChecker\" that includes a recursive method isPalindrome() to check if a given string str is a palindrome.\n\nThe isPalindrome() method has two cases:\n\nBase case: If the string length is 0 or 1, it returns true because an empty string or a string with one character is considered a palindrome.\nRecursive case: It compares the first and last characters of the string. If they are not equal, it returns false. Otherwise, it extracts the remaining substring between the first and last characters, and recursively checks if this substring is a palindrome. This process continues until the string is reduced to an empty string or one character.\nIn the main() method, we demonstrate the isPalindrome() method by checking if different strings are palindromes and printing the results.",
          "chinese": "在上面的练习中——\n\n我们定义一个类“PalindromeChecker”，其中包含一个递归方法 isPalindrome() 来检查给定字符串 str 是否是回文。\n\nisPalindrome()方法有两种情况：\n\n基本情况：如果字符串长度为 0 或 1，则返回 true，因为空字符串或只有一个字符的字符串被视为回文。\n递归情况：比较字符串的第一个和最后一个字符。 如果它们不相等，则返回 false。 否则，它提取第一个和最后一个字符之间的剩余子字符串，并递归检查该子字符串是否是回文。 这一过程持续进行，直到字符串减少为空字符串或一个字符。\n在 main() 方法中，我们通过检查不同字符串是否是回文并打印结果来演示 isPalindrome() 方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-4.png"
        }
      ]
    },
    {
      "orderInTag": 5,
      "id": "1214612750",
      "initCode": "public class Solution {\n    public static double calculateExponentiation(double base, int exponent) {\n\n    }\n}",
      "targetMethodName": "calculateExponentiation",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to calculate the exponentiation of a number (base) raised to a power (exponent).\n\n",
          "chinese": "编写一个 Java 递归方法来计算数字（底数）的幂（指数）的幂。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class ExponentiationCalculator {\n\n  public static double calculateExponentiation(double base, int exponent) {\n    // Base case: any number raised to the power of 0 is 1\n    if (exponent == 0) {\n      return 1;\n    }\n\n    // Recursive case: multiply the base with the exponentiation of (base, exponent-1)\n    return base * calculateExponentiation(base, exponent - 1);\n  }\n\n  public static void main(String[] args) {\n    double base = 3.5;\n    int exponent = 4;\n    double result = calculateExponentiation(base, exponent);\n    System.out.println(base + \" raised to the power of \" + exponent + \" is: \" + result);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nThe \"calculateExponentiation()\" method follows the recursive definition of exponentiation. It has two cases:\n\nBase case: If the exponent is 0, it returns 1. This is because any number raised to the power of 0 is equal to 1.\nRecursive case: For any positive exponent \"exponent\", it multiplies the base with the exponentiation of the same base raised to the power of exponent-1. This process is repeated recursively until the exponent reaches 0.\nIn the main() method, we demonstrate the calculateExponentiation() method by calculating the exponentiation of a base number (3.5) raised to a power (4) and printing the result.",
          "chinese": "在上面的练习中——\n\n“calculateExponentiation()”方法遵循求幂的递归定义。 它有两种情况：\n\n基本情况：如果指数为 0，则返回 1。这是因为任何数字的 0 次方都等于 1。\n递归情况：对于任何正指数“指数”，它将底数乘以相同底数的指数 1 次幂。 递归地重复这个过程，直到指数达到 0。\n在 main() 方法中，我们通过计算基数 (3.5) 的幂 (4) 的幂并打印结果来演示calculateExponentiation() 方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-5.png"
        }
      ]
    },
    {
      "orderInTag": 6,
      "id": "1106882667",
      "initCode": "public class Solution {\n    public static String reverseString(String str) {\n\n    }\n}",
      "targetMethodName": "reverseString",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to reverse a given string.",
          "chinese": "编写一个 Java 递归方法来反转给定的字符串。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class StringReverser {\n\n  public static String reverseString(String str) {\n    // Base case: if the string is empty or has only one character, it is already reversed\n    if (str.isEmpty() || str.length() == 1) {\n      return str;\n    }\n\n    // Recursive case: reverse the substring starting from the second character and concatenate the first character\n    return reverseString(str.substring(1)) + str.charAt(0);\n  }\n\n  public static void main(String[] args) {\n    String input = \"Java, World!\";\n    String reversed = reverseString(input);\n    System.out.println(\"Original string: \" + input);\n    System.out.println(\"Reversed string: \" + reversed);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nFirst, we define a class \"StringReverser\" that includes a recursive method reverseString() to reverse a given string str.\n\nThe reverseString() method has two cases:\n\nBase case: If the string is empty or has only one character, it is already reversed, so we return the original string.\nRecursive case: For any string with length greater than 1, we recursively reverse the substring starting with the second character and concatenate the first character at the end. This process continues until the string is reduced to an empty string or one character.\nIn the main() method, we demonstrate the reverseString() method by reversing the string \"Java, World!\" and printing both the original and reversed strings.",
          "chinese": "在上面的练习中——\n\n首先，我们定义一个“StringReverser”类，其中包含一个递归方法reverseString()来反转给定的字符串str。\n\nverseString()方法有两种情况：\n\n基本情况：如果字符串为空或只有一个字符，则它已经反转，因此我们返回原始字符串。\n递归情况：对于任何长度大于1的字符串，我们递归地反转从第二个字符开始的子字符串，并在末尾连接第一个字符。 这一过程持续进行，直到字符串减少为空字符串或一个字符。\n在main()方法中，我们通过反转字符串“Java, World!”来演示reverseString()方法。 并打印原始字符串和反转字符串。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-6.png"
        }
      ]
    },
    {
      "orderInTag": 7,
      "id": "1228848010",
      "initCode": "public class Solution {\n    public static int calculateGCD(int num1, int num2) {\n\n    }\n}",
      "targetMethodName": "calculateGCD",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to find the greatest common divisor (GCD) of two numbers.",
          "chinese": "编写一个 Java 递归方法来查找两个数字的最大公约数 (GCD)。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class GCDCalculator {\n\n  public static int calculateGCD(int num1, int num2) {\n    // Base case: if the second number is 0, the GCD is the first number\n    if (num2 == 0) {\n      return num1;\n    }\n\n    // Recursive case: calculate the GCD by recursively calling the method with num2 as the new num1 and the remainder as num2\n    int remainder = num1 % num2;\n    return calculateGCD(num2, remainder);\n  }\n\n  public static void main(String[] args) {\n    int number1 = 16;\n    int number2 = 18;\n    int gcd = calculateGCD(number1, number2);\n    System.out.println(\"The GCD of \" + number1 + \" and \" + number2 + \" is: \" + gcd);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nFirst, we define a class GCDCalculator that includes a recursive method calculateGCD() to find the greatest common divisor (GCD) of two numbers.\n\nThe calculateGCD() method follows the recursive GCD definition. It has two cases:\n\nBase case: If the second number (num2) is 0, the GCD is the first number (num1). This is because any number divided by 0 is the number itself.\nRecursive case: For any two numbers (num1 and num2), we calculate the remainder when num1 is divided by num2. We then recursively call the method with num2 as the new num1 and the remainder as num2. This process continues until num2 reaches 0.\nIn the main() method, we demonstrate the calculateGCD() method by finding the GCD of two numbers (16 and 18) and printing the result.",
          "chinese": "在上面的练习中——\n\n首先，我们定义一个类 GCDCalculator，其中包含一个递归方法calculateGCD()来查找两个数字的最大公约数（GCD）。\n\ncalculateGCD() 方法遵循递归 GCD 定义。 它有两种情况：\n\n基本情况：如果第二个数字 (num2) 为 0，则 GCD 为第一个数字 (num1)。 这是因为任何数字除以 0 就是数字本身。\n递归情况：对于任意两个数字（num1 和 num2），我们计算 num1 除以 num2 时的余数。 然后，我们递归调用该方法，将 num2 作为新的 num1，将余数作为 num2。 这个过程一直持续到 num2 达到 0。\n在 main() 方法中，我们通过查找两个数字（16 和 18）的 GCD 并打印结果来演示calculateGCD() 方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-7.png"
        }
      ]
    },
    {
      "orderInTag": 9,
      "id": "89064573",
      "initCode": "public class Solution {\n    public static int calculateOddNumberSum(int[] arr) {\n\n    }\n}",
      "targetMethodName": "calculateOddNumberSum",
      "concepts": [
        "recursive methods"
      ],
      "tags": [
        "recursive methods"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java recursive method to find the sum of all odd numbers in an array.",
          "chinese": "编写一个 Java 递归方法来查找数组中所有奇数的总和。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "public class OddNumberSumCalculator {\n\n  public static int calculateOddNumberSum(int[] arr) {\n    return calculateOddNumberSum(arr, 0);\n  }\n\n  private static int calculateOddNumberSum(int[] arr, int index) {\n    // Base case: if the index reaches the end of the array, return 0\n    if (index == arr.length) {\n      return 0;\n    }\n\n    // Recursive case: check if the element at the current index is odd,\n    // and recursively call the method with the next index and add the current element if it is odd\n    int sum = calculateOddNumberSum(arr, index + 1);\n    if (arr[index] % 2 != 0) {\n      sum += arr[index];\n    }\n\n    return sum;\n  }\n\n  public static void main(String[] args) {\n    int[] numbers = {\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9\n    };\n    int sum = calculateOddNumberSum(numbers);\n    System.out.println(\"The sum of all odd numbers in the array is: \" + sum);\n  }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Explanation:",
          "chinese": "解释：",
          "style": "BOLD"
        },
        {
          "contentType": "TEXT",
          "english": "In the above exercises -\n\nFirst, we define a class OddNumberSumCalculator that includes a recursive method calculateOddNumberSum() to find the sum of all odd numbers in an array.\n\nThe calculateOddNumberSum() method has two cases:\n\nBase case: If the index reaches the end of the array (index == arr.length), we return 0 as there are no more elements to check.\nRecursive case: For any index that is within the bounds of the array, we check if the element at that index is odd. We then recursively call the method with the next index and add the current element to the sum if it is odd. This process continues until we reach the end of the array.\nIn the main() method, we demonstrate the calculateOddNumberSum() method by finding the sum of all odd numbers in the array [1, 2, 3, 4, 5, 6, 7, 8, 9] and printing the result.",
          "chinese": "在上面的练习中——\n\n首先，我们定义一个类 OddNumberSumCalculator，其中包含一个递归方法calculateOddNumberSum()，用于查找数组中所有奇数的总和。\n\ncalculateOddNumberSum()方法有两种情况：\n\n基本情况：如果索引到达数组末尾（index == arr.length），我们返回 0，因为没有更多元素需要检查。\n递归情况：对于数组边界内的任何索引，我们检查该索引处的元素是否为奇数。 然后，我们使用下一个索引递归调用该方法，如果当前元素是奇数，则将当前元素添加到总和中。 这个过程一直持续到我们到达数组的末尾。\n在 main() 方法中，我们通过查找数组 [1, 2, 3, 4, 5, 6, 7, 8, 9] 中所有奇数的总和并打印结果来演示calculateOddNumberSum() 方法。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-recursive-exercise-flowchart-9.png"
        }
      ]
    },
    {
      "orderInTag": 1,
      "id": "2015407318",
      "initCode": "public class Solution {\n    public static double fahrenheit2Celsius(double fahrenheit) {\n\n    }\n}",
      "targetMethodName": "fahrenheit2celsius",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program to convert temperature from Fahrenheit to Celsius degrees.",
          "chinese": "编写一个Java程序，将温度从华氏度转换为摄氏度。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "The Fahrenheit scale is a temperature scale based on one proposed in 1724 by physicist Daniel Gabriel Fahrenheit. It uses the degree Fahrenheit (symbol: °F) as the unit.\n\nThe Celsius scale, previously known as the centigrade scale, is a temperature scale used by the International System of Units (SI). As an SI derived unit, it is used by all countries in the world, except the U.S.\n\nTest Data\nInput a degree in Fahrenheit: 212",
          "chinese": "编写一个Java程序，将温度从华氏度转换为摄氏度。\n\n\n\n华氏温标是基于物理学家丹尼尔·加布里埃尔·华氏在1724年提出的温标。它使用华氏度（符号：°F）作为单位。\n\n\n\n摄氏度，以前称为摄氏度，是国际单位制（SI）使用的温标。作为国际单位制衍生的单位，除美国外，世界上所有国家都使用它。\n\n\n\n测试数据\n\n输入华氏度：212",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-image-exercise-1.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data\nInput a degree in Fahrenheit: 212\nExpected Output:\n212.0 degree Fahrenheit is equal to 100.0 in Celsius"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise1 {\n\n    public static void main(String[] Strings) {\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Input a degree in Fahrenheit: \");\n        double fahrenheit = input.nextDouble();\n\n        double  celsius =(( 5 *(fahrenheit - 32.0)) / 9.0);\n        System.out.println(fahrenheit + \" degree Fahrenheit is equal to \" + celsius + \" in Celsius\");\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-1.png"
        }
      ]
    },
    {
      "orderInTag": 2,
      "id": "453573376",
      "initCode": "public class Solution {\n    public static double inch2meter(double inch) {\n\n    }\n}",
      "targetMethodName": "inch2meter",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program that reads a number in inches and converts it to meters.",
          "chinese": "编写一个Java程序，读取以英寸为单位的数字并将其转换为米。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "The inch is a unit of length in the (British) imperial and United States customary systems of measurement now formally equal to \u200B1/36 yard but usually understood as \u200B1/12 of a foot.\n\nThe meter is the base unit of length in some metric systems, including the International System of Units (SI). The SI unit symbol is m.\n\nNote: One inch is 0.0254 meter.\n\nTest Data\nInput a value for inch: 1000",
          "chinese": "英寸是（英国）帝国和美国习惯测量系统中的长度单位，现在正式等于\u200B1/36码，但通常理解为\u200B1/12英尺。\n\n\n\n米是一些公制中的基本长度单位，包括国际单位制（SI）。国际单位制符号为m。\n\n\n\n注：1英寸等于0.0254米。\n\n\n\n测试数据\n\n输入英寸值：1000",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-image-exercise-2.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nNote: One inch is 0.0254 meter.\nTest Data\nInput a value for inch: 1000\nExpected Output :\n1000.0 inch is 25.4 meters"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise2 {\n\n    public static void main(String[] Strings) {\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Input a value for inch: \");\n        double inch = input.nextDouble();\n        double meters = inch * 0.0254;\n        System.out.println(inch + \" inch is \" + meters + \" meters\");\n\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-2.png"
        }
      ]
    },
    {
      "orderInTag": 3,
      "id": "823932918",
      "initCode": "public class Solution {\n    public static int dataTypesTest3(int num) {\n\n    }\n}",
      "targetMethodName": "dataTypesTest3",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program that reads an integer between 0 and 1000 and adds all the digits in the integer.",
          "chinese": "编写一个Java程序，读取0到1000之间的整数，并将整数中的所有数字相加。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "An integer is a number that can be written without a fractional component. For example, 23, 6, 0, and −1245 are integers, while 3.25, \u200B7 1⁄2, and √3 are not.\n\nTest Data\nInput an integer between 0 and 1000: 565",
          "chinese": "整数是一个可以在没有分数成分的情况下写入的数字。例如，23、6、0和−1245是整数，而3.25，\u200B7 1⁄2和√3不是。\n\n\n\n测试数据\n\n输入0到1000之间的整数：565",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-2.png"
        },
        {
          "contentType": "CODE",
          "code": "java-datatype-image-exercise-3.png"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Main {\n\n    public static void main(String[] Strings) {\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Input an integer between 0 and 1000: \");\n        int num = input.nextInt();\n\n        int firstDigit = num % 10;\n        int remainingNumber = num / 10;\n        int SecondDigit = remainingNumber % 10;\n        remainingNumber = remainingNumber / 10;\n        int thirdDigit = remainingNumber % 10;\n        remainingNumber = remainingNumber / 10;\n        int fourthDigit = remainingNumber % 10;\n        int sum = thirdDigit + SecondDigit + firstDigit + fourthDigit;\n        System.out.println(\"The sum of all digits in \" + num + \" is \" + sum);\n\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-3.png"
        }
      ]
    },
    {
      "orderInTag": 4,
      "id": "730870659",
      "initCode": "public class Solution {\n    public static  {\n\n    }\n}",
      "targetMethodName": "minute2yearAndDay",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program to convert minutes into years and days.",
          "chinese": "编写一个Java程序，将分钟转换为年和天。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Test Data\nInput the number of minutes: 3456789",
          "chinese": "测试数据\n\n输入分钟数：3456789",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-image-exercise-4.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data\nInput the number of minutes: 3456789\nExpected Output :\n3456789 minutes is approximately 6 years and 210 days"
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise4 {\n\n    public static void main(String[] Strings) {\n\n\n        double minutesInYear = 60 * 24 * 365;\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Input the number of minutes: \");\n\n        double min = input.nextDouble();\n\n        long years = (long) (min / minutesInYear);\n        int days = (int) (min / 60 / 24) % 365;\n\n        System.out.println((int) min + \" minutes is approximately \" + years + \" years and \" + days + \" days\");\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-4.png"
        }
      ]
    },
    {
      "orderInTag": 5,
      "id": "466317658",
      "initCode": "public class Solution {\n    public static double calculateBMI(double weight_pound, double height_inch) {\n\n    }\n}",
      "targetMethodName": "calculateBMI",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program to compute the body mass index (BMI).",
          "chinese": "编写一个Java程序来计算体重指数（BMI）。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "BMI: The BMI is defined as the body mass divided by the square of the body height, and is universally expressed in units of kg/m2, resulting from mass in kilograms and height in metres.\n\nTest Data\nInput weight in pounds: 452\nInput height in inches: 72",
          "chinese": "BMI：BMI定义为体重除以身高的平方，通用单位为kg/m2，由质量（千克）和身高（米）得出。\n\n\n\n测试数据\n\n输入重量（磅）：452\n\n输入高度（英寸）：72",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-image-exercise-6.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data\nInput weight in pounds: 452\nInput height in inches: 72\nExpected Output:\nBody Mass Index is 61.30159143458721"
        },
        {
          "contentType": "TEXT",
          "english": "Addendum: Enter weight in pounds and height in inches.",
          "chinese": "补充：输入的体重以磅为单位，身高以英寸为单位。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise6 {\n\n    public static void main(String[] Strings) {\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.print(\"Input weight in pounds: \");\n        double weight = input.nextDouble();\n\n        System.out.print(\"Input height in inches: \");\n        double inches = input.nextDouble();\n\n        double BMI = weight * 0.45359237 / (inches * 0.0254 * inches * 0.0254);\n        System.out.print(\"Body Mass Index is \" + BMI+\"\\n\");\n    }\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-6.pngc"
        }
      ]
    },
    {
      "orderInTag": 6,
      "id": "1330187685",
      "initCode": "public class Solution {\n    public static float calculateSpeed(float meter, float hour, float minute, float second) {\n\n    }\n}",
      "targetMethodName": "calculateSpeed",
      "concepts": [
        "data types"
      ],
      "tags": [
        "data types"
      ],
      "exerciseContents": [
        {
          "contentType": "TEXT",
          "english": "Write a Java program to take the user for a distance (in meters) and the time taken (as three numbers: hours, minutes, seconds), and display the speed, in meters per second, kilometers per hour and miles per hour (hint: 1 mile = 1609 meters).",
          "chinese": "编写一个Java程序，向用户测量距离（以米为单位）和所用时间（以小时、分钟、秒为三个数字），并显示速度（以米/秒、公里/小时和英里/小时为单位）（提示：1英里=1609米）。",
          "style": ""
        },
        {
          "contentType": "TEXT",
          "english": "Test Data\nInput distance in meters: 2500\nInput hour: 5\nInput minutes: 56\nInput seconds: 23",
          "chinese": "测试数据\n\n输入距离（米）：2500\n\n输入小时数：5\n\n输入分钟数：56\n\n输入秒数：23",
          "style": ""
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-image-exercise-7.png"
        },
        {
          "contentType": "CODE",
          "code": "example\nTest Data\nInput distance in meters: 2500\nInput hour: 5\nInput minutes: 56\nInput seconds: 23\nExpected Output :\nYour speed in meters/second is 0.11691531\nYour speed in km/h is 0.42089513\nYour speed in miles/h is 0.26158804"
        },{
          "contentType": "TEXT",
          "english": "Addendum: The return speed is measured in m/s.",
          "chinese": "补充：返回的速度以m/s为单位。",
          "style": ""
        }
      ],
      "answerContents": [
        {
          "contentType": "TEXT",
          "english": "Sample Solution:\n\nJava Code:",
          "chinese": "示例：\n\nJava代码：",
          "style": "BOLD"
        },
        {
          "contentType": "CODE",
          "code": "import java.util.Scanner;\npublic class Exercise7 {\n\n    public static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in); \n\n\t\tfloat timeSeconds;\n\t\tfloat mps,kph, mph;\n\n\t\tSystem.out.print(\"Input distance in meters: \");\n\t\tfloat distance = scanner.nextFloat();\n\n\t\tSystem.out.print(\"Input hour: \");\n\t\tfloat hr = scanner.nextFloat();\n\n\t\tSystem.out.print(\"Input minutes: \");\n\t\tfloat min = scanner.nextFloat();\n\n\t\tSystem.out.print(\"Input seconds: \");\n\t\tfloat sec = scanner.nextFloat();\n\n\t\ttimeSeconds = (hr*3600) + (min*60) + sec;\n\t\tmps = distance / timeSeconds;\n\t\tkph = ( distance/1000.0f ) / ( timeSeconds/3600.0f );\n\t\tmph = kph / 1.609f;\n\n\t\tSystem.out.println(\"Your speed in meters/second is \"+mps);\n\t\tSystem.out.println(\"Your speed in km/h is \"+kph);\n\t\tSystem.out.println(\"Your speed in miles/h is \"+mph);\n\t\t\n\n\t\tscanner.close();\n\t}\n}"
        }
      ],
      "explanationContents": [
        {
          "contentType": "TEXT",
          "english": "Flowchart:",
          "chinese": "流程图：",
          "style": "BOLD"
        },
        {
          "contentType": "IMAGE",
          "imageName": "java-datatype-exercise-flowchart-7.png"
        }
      ]
    }
  ]
}